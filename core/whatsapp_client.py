#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cliente WhatsApp Web.js Integrado
Sistema WhatsApp direto em Python sem depend√™ncia Node.js
"""

import asyncio
import logging
import base64
import time
import json
import os
from typing import Optional, Dict, Any, List
import aiohttp
import websockets
from playwright.async_api import async_playwright, Browser, Page
import qrcode
from io import BytesIO
import random

logger = logging.getLogger(__name__)

class WhatsAppClient:
    """Cliente WhatsApp Web integrado com Playwright"""
    
    def __init__(self):
        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None
        self.is_connected = False
        self.session_data = None
        self.qr_code_data = None
        self.message_queue = []
        self.last_message_time = 0
        self.message_count = 0
        
    async def initialize(self) -> Optional[str]:
        """Inicializar WhatsApp Web e gerar QR Code"""
        try:
            logger.info("üöÄ Inicializando WhatsApp Web...")
            
            # Verificar se Playwright est√° dispon√≠vel
            try:
                self.playwright = await async_playwright().start()
                logger.info("‚úÖ Playwright inicializado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar Playwright: {e}")
                return None
            
            # Configurar navegador stealth
            try:
                self.browser = await self.playwright.chromium.launch(
                    headless=True,  # Headless para testes - QR via base64
                    args=[
                        '--disable-blink-features=AutomationControlled',
                        '--disable-dev-shm-usage',
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-web-security',
                        '--disable-features=VizDisplayCompositor',
                        '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                    ]
                )
                logger.info("‚úÖ Navegador Chromium inicializado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar navegador: {e}")
                logger.info("üîÑ Tentando instalar browsers...")
                try:
                    import subprocess
                    subprocess.run(["playwright", "install", "chromium"], check=True, capture_output=True)
                    logger.info("‚úÖ Browsers instalados, tentando novamente...")
                    self.browser = await self.playwright.chromium.launch(
                        headless=True,
                        args=[
                            '--disable-blink-features=AutomationControlled',
                            '--disable-dev-shm-usage',
                            '--no-sandbox',
                            '--disable-setuid-sandbox',
                            '--disable-web-security',
                            '--disable-features=VizDisplayCompositor',
                            '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                        ]
                    )
                    logger.info("‚úÖ Navegador inicializado ap√≥s instala√ß√£o")
                except Exception as e2:
                    logger.error(f"‚ùå Erro definitivo ao inicializar navegador: {e2}")
                    return None
            
            # Configurar contexto stealth
            context = await self.browser.new_context(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                viewport={'width': 1366, 'height': 768},
                locale='pt-BR',
                timezone_id='America/Sao_Paulo'
            )
            
            # Stealth mode - mascarar automa√ß√£o
            await context.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined
                });
                
                window.chrome = {
                    runtime: {}
                };
                
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5]
                });
            """)
            
            self.page = await context.new_page()
            
            # Carregar sess√£o se existir
            await self._load_session()
            
            # Acessar WhatsApp Web
            await self.page.goto('https://web.whatsapp.com')
            
            # Aguardar carregar
            await asyncio.sleep(5)
            
            # Verificar se j√° est√° logado
            if await self._check_if_logged_in():
                logger.info("‚úÖ J√° logado no WhatsApp")
                self.is_connected = True
                return None
            else:
                # Aguardar QR Code aparecer
                qr_code = await self._wait_for_qr_code()
                if qr_code:
                    self.qr_code_data = qr_code
                    logger.info("üì± QR Code gerado, aguardando escaneamento...")
                    
                    # Iniciar monitoramento de login
                    asyncio.create_task(self._monitor_login())
                    
                    return qr_code
                else:
                    logger.error("‚ùå N√£o foi poss√≠vel obter QR Code")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar WhatsApp: {e}")
            logger.error(f"Tipo de erro: {type(e).__name__}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return None
    
    async def _check_if_logged_in(self) -> bool:
        """Verificar se j√° est√° logado"""
        try:
            # Aguardar alguns segundos para p√°gina carregar
            await asyncio.sleep(3)
            
            # Verificar se existe o elemento de conversas
            try:
                await self.page.wait_for_selector('[data-testid="chat-list"]', timeout=10000)
                return True
            except:
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar login: {e}")
            return False
    
    async def _wait_for_qr_code(self) -> Optional[str]:
        """Aguardar e capturar QR Code"""
        try:
            logger.info("üîç Aguardando QR Code aparecer...")
            
            # Aguardar QR Code aparecer
            qr_selector = '[data-testid="qr-code"]'
            await self.page.wait_for_selector(qr_selector, timeout=30000)
            logger.info("‚úÖ QR Code encontrado na p√°gina")
            
            # Aguardar um pouco para garantir que carregou
            await asyncio.sleep(2)
            
            # Capturar QR Code
            qr_element = await self.page.query_selector(qr_selector)
            if qr_element:
                logger.info("üì± Capturando dados do QR Code...")
                
                # Obter atributo data-ref do QR
                qr_data = await qr_element.get_attribute('data-ref')
                
                if qr_data:
                    logger.info("üéØ Gerando QR Code como imagem...")
                    # Gerar QR Code como base64
                    qr_img = qrcode.make(qr_data)
                    buffer = BytesIO()
                    qr_img.save(buffer, format='PNG')
                    qr_base64 = base64.b64encode(buffer.getvalue()).decode()
                    
                    logger.info("‚úÖ QR Code gerado com sucesso")
                    return f"data:image/png;base64,{qr_base64}"
                else:
                    logger.info("üì∏ Usando screenshot como fallback...")
                    # Fallback: screenshot do QR
                    qr_screenshot = await qr_element.screenshot()
                    qr_base64 = base64.b64encode(qr_screenshot).decode()
                    logger.info("‚úÖ QR Code capturado via screenshot")
                    return f"data:image/png;base64,{qr_base64}"
            else:
                logger.warning("‚ö†Ô∏è Elemento QR Code n√£o encontrado")
                return None
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao capturar QR Code: {e}")
            logger.info("üîÑ Tentando m√©todo alternativo...")
            try:
                # M√©todo alternativo: procurar por qualquer QR code
                qr_elements = await self.page.query_selector_all('img[src*="data:image/png"]')
                if qr_elements:
                    logger.info("üéØ QR Code encontrado via m√©todo alternativo")
                    qr_screenshot = await qr_elements[0].screenshot()
                    qr_base64 = base64.b64encode(qr_screenshot).decode()
                    return f"data:image/png;base64,{qr_base64}"
            except Exception as e2:
                logger.error(f"‚ùå Erro no m√©todo alternativo: {e2}")
            
            return None
    
    async def _monitor_login(self):
        """Monitorar login via QR Code"""
        try:
            logger.info("üëÄ Monitorando login...")
            
            # Aguardar at√© 2 minutos para login
            for _ in range(120):  # 120 segundos
                if await self._check_if_logged_in():
                    logger.info("‚úÖ Login realizado com sucesso!")
                    self.is_connected = True
                    
                    # Salvar sess√£o
                    await self._save_session()
                    
                    # Configurar listeners
                    await self._setup_message_listeners()
                    
                    break
                
                await asyncio.sleep(1)
            
            if not self.is_connected:
                logger.warning("‚è∞ Timeout no login via QR Code")
                
        except Exception as e:
            logger.error(f"‚ùå Erro no monitoramento de login: {e}")
    
    async def _setup_message_listeners(self):
        """Configurar listeners para mensagens recebidas"""
        try:
            # Injetar c√≥digo para capturar mensagens
            await self.page.evaluate("""
                window.receivedMessages = [];
                
                // Fun√ß√£o para capturar novas mensagens
                function captureMessages() {
                    const messages = document.querySelectorAll('[data-testid="conversation-panel-messages"] [data-testid="msg-container"]');
                    
                    messages.forEach(msg => {
                        const isIncoming = !msg.querySelector('[data-testid="msg-meta-status"]');
                        if (isIncoming) {
                            const textElement = msg.querySelector('span.selectable-text span');
                            const text = textElement ? textElement.innerText : '';
                            
                            if (text && !window.processedMessages?.includes(text)) {
                                window.receivedMessages.push({
                                    text: text,
                                    timestamp: Date.now(),
                                    processed: false
                                });
                                
                                if (!window.processedMessages) window.processedMessages = [];
                                window.processedMessages.push(text);
                            }
                        }
                    });
                }
                
                // Monitorar mudan√ßas
                const observer = new MutationObserver(captureMessages);
                observer.observe(document.body, { childList: true, subtree: true });
                
                setInterval(captureMessages, 1000);
            """)
            
            logger.info("‚úÖ Listeners de mensagem configurados")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar listeners: {e}")
    
    async def send_message(self, phone: str, message: str, attachment: Optional[str] = None) -> bool:
        """Enviar mensagem com simula√ß√£o humana"""
        try:
            if not self.is_connected:
                logger.error("‚ùå WhatsApp n√£o conectado")
                return False
            
            logger.info(f"üì§ Enviando mensagem para {phone}")
            
            # Formatar n√∫mero
            formatted_phone = self._format_phone(phone)
            
            # Abrir conversa
            chat_url = f"https://web.whatsapp.com/send?phone={formatted_phone}"
            await self.page.goto(chat_url)
            
            # Aguardar conversa carregar
            await asyncio.sleep(3)
            
            # Verificar se conversa abriu
            try:
                await self.page.wait_for_selector('[data-testid="conversation-panel-body"]', timeout=10000)
            except:
                logger.error(f"‚ùå N√£o foi poss√≠vel abrir conversa com {phone}")
                return False
            
            # Enviar anexo se fornecido
            if attachment and os.path.exists(attachment):
                await self._send_attachment(attachment)
                await asyncio.sleep(2)
            
            # Localizar campo de mensagem
            message_input = await self.page.wait_for_selector('[data-testid="message-composer-input"]')
            
            # Simular digita√ß√£o humana
            await self._type_human_like(message_input, message)
            
            # Aguardar um pouco antes de enviar
            await asyncio.sleep(1)
            
            # Enviar mensagem
            await self.page.keyboard.press('Enter')
            
            # Aguardar confirma√ß√£o
            await asyncio.sleep(2)
            
            logger.info(f"‚úÖ Mensagem enviada para {phone}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem para {phone}: {e}")
            return False
    
    async def _send_attachment(self, file_path: str):
        """Enviar anexo"""
        try:
            # Clicar no bot√£o de anexo
            attach_button = await self.page.wait_for_selector('[data-testid="clip"]')
            await attach_button.click()
            
            await asyncio.sleep(1)
            
            # Clicar em documento
            doc_button = await self.page.wait_for_selector('[data-testid="attach-document"]')
            await doc_button.click()
            
            # Upload do arquivo
            file_input = await self.page.wait_for_selector('input[type="file"]')
            await file_input.set_input_files(file_path)
            
            await asyncio.sleep(2)
            
            # Enviar anexo
            send_button = await self.page.wait_for_selector('[data-testid="send-button"]')
            await send_button.click()
            
            logger.info(f"‚úÖ Anexo enviado: {os.path.basename(file_path)}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar anexo: {e}")
    
    async def _type_human_like(self, element, text: str):
        """ü§ñ SIMULA√á√ÉO HUMANA ULTRA AVAN√áADA"""
        try:
            # üßπ Limpar campo primeiro
            await element.click()
            await self.page.keyboard.press('Control+A')
            await self.page.keyboard.press('Delete')
            
            # ‚è±Ô∏è PAUSA PARA "PENSAR"
            await asyncio.sleep(random.uniform(0.5, 2.0))
            
            # ‚å®Ô∏è DIGITA√á√ÉO HUMANA ULTRA REALISTA
            words = text.split()
            
            for i, word in enumerate(words):
                # üé≤ VELOCIDADE VARI√ÅVEL POR PALAVRA
                typing_speed = random.uniform(0.05, 0.15)
                
                # ‚å®Ô∏è DIGITAR PALAVRA CARACTERE POR CARACTERE
                for char in word:
                    await element.type(char)
                    
                    # ‚è±Ô∏è VELOCIDADE VARI√ÅVEL POR CARACTERE
                    char_delay = typing_speed + (hash(char) % 100) / 3000
                    await asyncio.sleep(char_delay)
                    
                    # üé≤ CHANCE DE "ERRAR" E CORRIGIR
                    if random.random() < 0.01:  # 1% chance
                        await self._simulate_typo_correction(element)
                
                # ‚è±Ô∏è PAUSA ENTRE PALAVRAS
                if i < len(words) - 1:
                    word_pause = random.uniform(0.1, 0.3)
                    await asyncio.sleep(word_pause)
                
                # üß† PAUSA PARA "PENSAR" EM PONTUA√á√ÉO
                if any(punct in word for punct in '.!?'):
                    thinking_pause = random.uniform(0.5, 1.5)
                    await asyncio.sleep(thinking_pause)
            
            # ‚è±Ô∏è PAUSA FINAL ANTES DE ENVIAR
            await asyncio.sleep(random.uniform(1.0, 3.0))
            
        except Exception as e:
            logger.error(f"‚ùå Erro na simula√ß√£o humana: {e}")
            # Fallback para digita√ß√£o simples
            await element.fill(text)
    
    async def _simulate_typo_correction(self, element):
        """‚å®Ô∏è SIMULAR CORRE√á√ÉO DE ERRO DE DIGITA√á√ÉO"""
        try:
            # üé≤ SIMULAR ERRO
            await element.type('x')
            await asyncio.sleep(random.uniform(0.2, 0.5))
            
            # ‚å®Ô∏è APAGAR ERRO
            await self.page.keyboard.press('Backspace')
            await asyncio.sleep(random.uniform(0.1, 0.3))
            
            logger.debug("‚å®Ô∏è Erro de digita√ß√£o simulado e corrigido")
            
        except Exception as e:
            logger.debug(f"Erro na simula√ß√£o de erro: {e}")
    
    async def _simulate_human_behavior(self):
        """ü§ñ SIMULA√á√ÉO DE COMPORTAMENTO HUMANO AVAN√áADO"""
        try:
            # üé≤ A√á√ïES ALEAT√ìRIAS
            actions = [
                lambda: asyncio.sleep(random.uniform(0.5, 2.0)),
                lambda: self.page.mouse.move(random.randint(100, 800), random.randint(100, 600)),
                lambda: asyncio.sleep(random.uniform(1.0, 3.0)),
                lambda: logger.debug("ü§ñ A√ß√£o humana simulada: verificando mensagem"),
            ]
            
            # üé≤ EXECUTAR A√á√ÉO ALEAT√ìRIA
            if random.random() < 0.3:  # 30% chance
                action = random.choice(actions)
                await action()
                
        except Exception as e:
            logger.debug(f"Erro na simula√ß√£o de comportamento: {e}")
    
    async def _ultra_stealth_send(self, phone: str, message: str, attachment: Optional[str] = None) -> bool:
        """üöÄ ENVIO ULTRA STEALTH - M√°xima prote√ß√£o"""
        try:
            if not self.is_connected:
                logger.error("‚ùå WhatsApp n√£o conectado")
                return False
            
            logger.info(f"üì§ ULTRA STEALTH: Enviando mensagem para {phone}")
            
            # üõ°Ô∏è VERIFICA√á√ÉO DE SEGURAN√áA
            current_time = time.time()
            if current_time - self.last_message_time < 10:  # M√≠nimo 10s entre mensagens
                wait_time = 10 - (current_time - self.last_message_time)
                logger.info(f"‚è±Ô∏è Aguardando {wait_time:.1f}s por seguran√ßa...")
                await asyncio.sleep(wait_time)
            
            # üì± FORMATAR N√öMERO
            formatted_phone = self._format_phone(phone)
            
            # üîó ABRIR CONVERSA
            chat_url = f"https://web.whatsapp.com/send?phone={formatted_phone}"
            await self.page.goto(chat_url)
            
            # ‚è±Ô∏è AGUARDAR CONVERSA CARREGAR
            await asyncio.sleep(random.uniform(2, 4))
            
            # ‚úÖ VERIFICAR SE CONVERSA ABRIU
            try:
                await self.page.wait_for_selector('[data-testid="conversation-panel-body"]', timeout=15000)
            except:
                logger.error(f"‚ùå N√£o foi poss√≠vel abrir conversa com {phone}")
                return False
            
            # üìé ENVIAR ANEXO SE FORNECIDO
            if attachment and os.path.exists(attachment):
                await self._send_attachment_stealth(attachment)
                await asyncio.sleep(random.uniform(1.5, 3.0))
            
            # ‚å®Ô∏è LOCALIZAR CAMPO DE MENSAGEM
            message_input = await self.page.wait_for_selector('[data-testid="message-composer-input"]')
            
            # ü§ñ SIMULA√á√ÉO HUMANA ULTRA AVAN√áADA
            await self._simulate_human_behavior()
            
            # ‚å®Ô∏è SIMULAR DIGITA√á√ÉO HUMANA
            await self._type_human_like(message_input, message)
            
            # ‚è±Ô∏è PAUSA ANTES DE ENVIAR
            await asyncio.sleep(random.uniform(1.5, 3.0))
            
            # üì§ ENVIAR MENSAGEM
            await self.page.keyboard.press('Enter')
            
            # ‚è±Ô∏è AGUARDAR CONFIRMA√á√ÉO
            await asyncio.sleep(random.uniform(2, 4))
            
            # üìä ATUALIZAR CONTADORES
            self.last_message_time = time.time()
            self.message_count += 1
            
            logger.info(f"‚úÖ ULTRA STEALTH: Mensagem enviada para {phone}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro no envio ULTRA STEALTH para {phone}: {e}")
            return False
    
    async def _send_attachment_stealth(self, file_path: str):
        """üìé ENVIAR ANEXO COM STEALTH"""
        try:
            # üé≤ PAUSA ALEAT√ìRIA
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # üìé CLICAR NO BOT√ÉO DE ANEXO
            attach_button = await self.page.wait_for_selector('[data-testid="clip"]')
            await attach_button.click()
            
            await asyncio.sleep(random.uniform(0.8, 1.5))
            
            # üìÑ CLICAR EM DOCUMENTO
            doc_button = await self.page.wait_for_selector('[data-testid="attach-document"]')
            await doc_button.click()
            
            # üì§ UPLOAD DO ARQUIVO
            file_input = await self.page.wait_for_selector('input[type="file"]')
            await file_input.set_input_files(file_path)
            
            await asyncio.sleep(random.uniform(1.5, 3.0))
            
            # üì§ ENVIAR ANEXO
            send_button = await self.page.wait_for_selector('[data-testid="send-button"]')
            await send_button.click()
            
            logger.info(f"‚úÖ Anexo ULTRA STEALTH enviado: {os.path.basename(file_path)}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar anexo ULTRA STEALTH: {e}")
    
    async def get_qr_code(self) -> Optional[str]:
        """Obter QR Code atual"""
        if not self.is_connected and self.qr_code_data:
            # Tentar capturar QR atualizado
            try:
                new_qr = await self._wait_for_qr_code()
                if new_qr:
                    self.qr_code_data = new_qr
                return self.qr_code_data
            except:
                return self.qr_code_data
        return None
    
    async def get_received_messages(self) -> List[Dict[str, Any]]:
        """Obter mensagens recebidas"""
        try:
            if not self.is_connected:
                return []
            
            messages = await self.page.evaluate("""
                () => {
                    const unprocessed = window.receivedMessages?.filter(msg => !msg.processed) || [];
                    
                    // Marcar como processadas
                    if (window.receivedMessages) {
                        window.receivedMessages.forEach(msg => msg.processed = true);
                    }
                    
                    return unprocessed;
                }
            """)
            
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter mensagens: {e}")
            return []
    
    def _format_phone(self, phone: str) -> str:
        """Formatar n√∫mero de telefone"""
        # Remover caracteres n√£o num√©ricos
        clean_phone = ''.join(filter(str.isdigit, phone))
        
        # Adicionar c√≥digo do pa√≠s se necess√°rio
        if not clean_phone.startswith('55'):
            clean_phone = '55' + clean_phone
        
        return clean_phone
    
    async def _save_session(self):
        """Salvar dados da sess√£o"""
        try:
            # Obter cookies e localStorage
            cookies = await self.page.context.cookies()
            local_storage = await self.page.evaluate('() => ({ ...localStorage })')
            
            session_data = {
                'cookies': cookies,
                'local_storage': local_storage,
                'timestamp': time.time()
            }
            
            # Salvar em arquivo
            os.makedirs('sessions', exist_ok=True)
            with open('sessions/whatsapp_session.json', 'w') as f:
                json.dump(session_data, f)
            
            logger.info("üíæ Sess√£o salva")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar sess√£o: {e}")
    
    async def _load_session(self):
        """Carregar sess√£o salva"""
        try:
            session_file = 'sessions/whatsapp_session.json'
            if os.path.exists(session_file):
                with open(session_file, 'r') as f:
                    session_data = json.load(f)
                
                # Verificar se sess√£o n√£o est√° muito antiga (7 dias)
                if time.time() - session_data.get('timestamp', 0) < 7 * 24 * 3600:
                    # Restaurar cookies
                    await self.page.context.add_cookies(session_data['cookies'])
                    
                    # Restaurar localStorage
                    await self.page.evaluate(f"""
                        () => {{
                            const data = {json.dumps(session_data['local_storage'])};
                            for (const [key, value] of Object.entries(data)) {{
                                localStorage.setItem(key, value);
                            }}
                        }}
                    """)
                    
                    logger.info("üìÇ Sess√£o carregada")
                    return True
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar sess√£o: {e}")
        
        return False
    
    async def close(self):
        """Fechar cliente"""
        try:
            if self.browser:
                await self.browser.close()
            if self.playwright:
                await self.playwright.stop()
            logger.info("üîí Cliente WhatsApp fechado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao fechar cliente: {e}") 
            await self._type_human_like(message_input, message)
            
            # ‚è±Ô∏è PAUSA ANTES DE ENVIAR
            await asyncio.sleep(random.uniform(1.5, 3.0))
            
            # üì§ ENVIAR MENSAGEM
            await self.page.keyboard.press('Enter')
            
            # ‚è±Ô∏è AGUARDAR CONFIRMA√á√ÉO
            await asyncio.sleep(random.uniform(2, 4))
            
            # üìä ATUALIZAR CONTADORES
            self.last_message_time = time.time()
            self.message_count += 1
            
            logger.info(f"‚úÖ ULTRA STEALTH: Mensagem enviada para {phone}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro no envio ULTRA STEALTH para {phone}: {e}")
            return False
    
    async def _send_attachment_stealth(self, file_path: str):
        """üìé ENVIAR ANEXO COM STEALTH"""
        try:
            # üé≤ PAUSA ALEAT√ìRIA
            await asyncio.sleep(random.uniform(0.5, 1.5))
            
            # üìé CLICAR NO BOT√ÉO DE ANEXO
            attach_button = await self.page.wait_for_selector('[data-testid="clip"]')
            await attach_button.click()
            
            await asyncio.sleep(random.uniform(0.8, 1.5))
            
            # üìÑ CLICAR EM DOCUMENTO
            doc_button = await self.page.wait_for_selector('[data-testid="attach-document"]')
            await doc_button.click()
            
            # üì§ UPLOAD DO ARQUIVO
            file_input = await self.page.wait_for_selector('input[type="file"]')
            await file_input.set_input_files(file_path)
            
            await asyncio.sleep(random.uniform(1.5, 3.0))
            
            # üì§ ENVIAR ANEXO
            send_button = await self.page.wait_for_selector('[data-testid="send-button"]')
            await send_button.click()
            
            logger.info(f"‚úÖ Anexo ULTRA STEALTH enviado: {os.path.basename(file_path)}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar anexo ULTRA STEALTH: {e}")
    
    async def get_qr_code(self) -> Optional[str]:
        """Obter QR Code atual"""
        if not self.is_connected and self.qr_code_data:
            # Tentar capturar QR atualizado
            try:
                new_qr = await self._wait_for_qr_code()
                if new_qr:
                    self.qr_code_data = new_qr
                return self.qr_code_data
            except:
                return self.qr_code_data
        return None
    
    async def get_received_messages(self) -> List[Dict[str, Any]]:
        """Obter mensagens recebidas"""
        try:
            if not self.is_connected:
                return []
            
            messages = await self.page.evaluate("""
                () => {
                    const unprocessed = window.receivedMessages?.filter(msg => !msg.processed) || [];
                    
                    // Marcar como processadas
                    if (window.receivedMessages) {
                        window.receivedMessages.forEach(msg => msg.processed = true);
                    }
                    
                    return unprocessed;
                }
            """)
            
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter mensagens: {e}")
            return []
    
    def _format_phone(self, phone: str) -> str:
        """Formatar n√∫mero de telefone"""
        # Remover caracteres n√£o num√©ricos
        clean_phone = ''.join(filter(str.isdigit, phone))
        
        # Adicionar c√≥digo do pa√≠s se necess√°rio
        if not clean_phone.startswith('55'):
            clean_phone = '55' + clean_phone
        
        return clean_phone
    
    async def _save_session(self):
        """Salvar dados da sess√£o"""
        try:
            # Obter cookies e localStorage
            cookies = await self.page.context.cookies()
            local_storage = await self.page.evaluate('() => ({ ...localStorage })')
            
            session_data = {
                'cookies': cookies,
                'local_storage': local_storage,
                'timestamp': time.time()
            }
            
            # Salvar em arquivo
            os.makedirs('sessions', exist_ok=True)
            with open('sessions/whatsapp_session.json', 'w') as f:
                json.dump(session_data, f)
            
            logger.info("üíæ Sess√£o salva")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar sess√£o: {e}")
    
    async def _load_session(self):
        """Carregar sess√£o salva"""
        try:
            session_file = 'sessions/whatsapp_session.json'
            if os.path.exists(session_file):
                with open(session_file, 'r') as f:
                    session_data = json.load(f)
                
                # Verificar se sess√£o n√£o est√° muito antiga (7 dias)
                if time.time() - session_data.get('timestamp', 0) < 7 * 24 * 3600:
                    # Restaurar cookies
                    await self.page.context.add_cookies(session_data['cookies'])
                    
                    # Restaurar localStorage
                    await self.page.evaluate(f"""
                        () => {{
                            const data = {json.dumps(session_data['local_storage'])};
                            for (const [key, value] of Object.entries(data)) {{
                                localStorage.setItem(key, value);
                            }}
                        }}
                    """)
                    
                    logger.info("üìÇ Sess√£o carregada")
                    return True
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar sess√£o: {e}")
        
        return False
    
    async def close(self):
        """Fechar cliente"""
        try:
            if self.browser:
                await self.browser.close()
            if self.playwright:
                await self.playwright.stop()
            logger.info("üîí Cliente WhatsApp fechado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao fechar cliente: {e}")