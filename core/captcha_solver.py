#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema Anti-Captcha para Blacktemplar Bolter
Adaptado do GoogleRecaptchaBypass para usar Playwright ao inv√©s de DrissionPage
Resolve reCAPTCHA v2 usando reconhecimento de √°udio
"""

import os
import urllib.request
import random
import time
import tempfile
import requests
from typing import Optional
from playwright.async_api import Page
import speech_recognition as sr
from pydub import AudioSegment
import asyncio
from .logger import logger, security_event

class CaptchaSolver:
    """Resolvedor de reCAPTCHA usando reconhecimento de √°udio com Playwright"""
    
    # Constantes
    TEMP_DIR = os.getenv("TEMP") if os.name == "nt" else "/tmp"
    TIMEOUT_STANDARD = 7000  # milliseconds for Playwright
    TIMEOUT_SHORT = 1000
    TIMEOUT_DETECTION = 50
    
    def __init__(self, page: Page):
        """Inicializar solver com p√°gina Playwright
        
        Args:
            page: Inst√¢ncia da p√°gina Playwright
        """
        self.page = page
        self.bypass_available = True
        logger.info("CaptchaSolver inicializado com Playwright")
        
    async def solve_captcha(self) -> bool:
        """Tentar resolver o reCAPTCHA
        
        Returns:
            bool: True se resolvido com sucesso, False caso contr√°rio
        """
        try:
            logger.info("üîê Iniciando resolu√ß√£o de reCAPTCHA...")
            
            # Aguardar iframe do reCAPTCHA aparecer
            await self.page.wait_for_selector("iframe[title='reCAPTCHA']", timeout=self.TIMEOUT_STANDARD)
            
            # Localizar o iframe principal do reCAPTCHA
            recaptcha_frame = self.page.frame_locator("iframe[title='reCAPTCHA']")
            
            # Aguardar checkbox aparecer e clicar
            await recaptcha_frame.locator(".rc-anchor-content").wait_for(timeout=self.TIMEOUT_STANDARD)
            await recaptcha_frame.locator(".rc-anchor-content").click()
            
            logger.info("‚úÖ Clicou no checkbox do reCAPTCHA")
            
            # Aguardar um pouco para ver se resolve automaticamente
            await asyncio.sleep(2)
            
            # Verificar se foi resolvido apenas com o clique
            if await self.is_solved():
                logger.info("üéâ reCAPTCHA resolvido automaticamente!")
                security_event("captcha_solved_automatically", "low")
                return True
            
            # Se n√£o resolveu automaticamente, tentar desafio de √°udio
            logger.info("üéµ Captcha n√£o resolvido automaticamente, tentando √°udio...")
            
            # Localizar iframe do desafio
            challenge_frame = self.page.frame_locator("iframe[title*='recaptcha challenge']")
            
            # Clicar no bot√£o de √°udio
            await challenge_frame.locator("#recaptcha-audio-button").wait_for(timeout=self.TIMEOUT_STANDARD)
            await challenge_frame.locator("#recaptcha-audio-button").click()
            
            logger.info("üîä Clicou no bot√£o de √°udio")
            await asyncio.sleep(1)
            
            # Verificar se o bot foi detectado
            if await self.is_detected():
                logger.error("üö´ Bot detectado pelo reCAPTCHA")
                security_event("captcha_bot_detected", "high")
                return False
            
            # Aguardar √°udio carregar e obter URL
            await challenge_frame.locator("#audio-source").wait_for(timeout=self.TIMEOUT_STANDARD)
            audio_url = await challenge_frame.locator("#audio-source").get_attribute("src")
            
            if not audio_url:
                logger.error("‚ùå URL do √°udio n√£o encontrada")
                return False
                
            logger.info(f"üéµ URL do √°udio obtida: {audio_url[:50]}...")
            
            # Processar √°udio e obter texto
            text_response = await self._process_audio_challenge(audio_url)
            
            if not text_response:
                logger.error("‚ùå Falha ao processar √°udio")
                return False
                
            logger.info(f"üéØ Texto reconhecido: {text_response}")
            
            # Inserir resposta no campo
            await challenge_frame.locator("#audio-response").fill(text_response.lower())
            await challenge_frame.locator("#recaptcha-verify-button").click()
            
            logger.info("‚úÖ Resposta submetida")
            await asyncio.sleep(2)
            
            # Verificar se foi resolvido
            if await self.is_solved():
                logger.info("üéâ reCAPTCHA resolvido com sucesso via √°udio!")
                security_event("captcha_solved_audio", "low", text_length=len(text_response))
                return True
            else:
                logger.error("‚ùå reCAPTCHA n√£o foi resolvido")
                security_event("captcha_failed", "medium")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao resolver reCAPTCHA: {e}")
            security_event("captcha_error", "medium", error=str(e))
            return False
    
    async def _process_audio_challenge(self, audio_url: str) -> Optional[str]:
        """Processar desafio de √°udio e retornar texto reconhecido
        
        Args:
            audio_url: URL do arquivo de √°udio
            
        Returns:
            str: Texto reconhecido ou None se falhou
        """
        mp3_path = None
        wav_path = None
        
        try:
            # Gerar nomes √∫nicos para arquivos tempor√°rios
            random_id = random.randrange(1, 10000)
            mp3_path = os.path.join(self.TEMP_DIR, f"captcha_audio_{random_id}.mp3")
            wav_path = os.path.join(self.TEMP_DIR, f"captcha_audio_{random_id}.wav")
            
            logger.info("‚¨áÔ∏è Baixando arquivo de √°udio...")
            
            # Baixar √°udio
            urllib.request.urlretrieve(audio_url, mp3_path)
            
            # Converter MP3 para WAV
            logger.info("üîÑ Convertendo √°udio para WAV...")
            sound = AudioSegment.from_mp3(mp3_path)
            sound.export(wav_path, format="wav")
            
            # Reconhecer fala usando Google Speech Recognition
            logger.info("üé§ Reconhecendo fala no √°udio...")
            recognizer = sr.Recognizer()
            
            with sr.AudioFile(wav_path) as source:
                # Ajustar para ru√≠do ambiente
                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                audio_data = recognizer.record(source)
            
            # Tentar reconhecimento em ingl√™s (reCAPTCHA usa ingl√™s)
            text = recognizer.recognize_google(audio_data, language='en-US')
            
            logger.info(f"‚úÖ √Åudio reconhecido com sucesso: '{text}'")
            return text
            
        except sr.UnknownValueError:
            logger.error("‚ùå Google Speech Recognition n√£o conseguiu entender o √°udio")
            return None
        except sr.RequestError as e:
            logger.error(f"‚ùå Erro no servi√ßo Google Speech Recognition: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar √°udio: {e}")
            return None
        finally:
            # Limpar arquivos tempor√°rios
            for path in (mp3_path, wav_path):
                if path and os.path.exists(path):
                    try:
                        os.remove(path)
                    except OSError:
                        pass
    
    async def is_solved(self) -> bool:
        """Verificar se o captcha foi resolvido
        
        Returns:
            bool: True se resolvido, False caso contr√°rio
        """
        try:
            # Procurar pelo checkmark vis√≠vel que indica sucesso
            recaptcha_frame = self.page.frame_locator("iframe[title='reCAPTCHA']")
            
            # Verificar se o checkbox est√° marcado
            checkbox = recaptcha_frame.locator(".recaptcha-checkbox-checkmark")
            
            # Se o elemento tem atributo style, significa que est√° vis√≠vel (resolvido)
            style_attr = await checkbox.get_attribute("style")
            
            is_solved = style_attr is not None and style_attr != ""
            
            if is_solved:
                logger.info("‚úÖ Captcha verificado como resolvido")
            
            return is_solved
            
        except Exception as e:
            logger.debug(f"Erro ao verificar se captcha foi resolvido: {e}")
            return False
    
    async def is_detected(self) -> bool:
        """Verificar se o bot foi detectado
        
        Returns:
            bool: True se detectado, False caso contr√°rio
        """
        try:
            # Procurar por mensagens de erro que indicam detec√ß√£o de bot
            challenge_frame = self.page.frame_locator("iframe[title*='recaptcha challenge']")
            
            # Procurar texto "Try again later" que indica detec√ß√£o
            try_again_element = challenge_frame.locator("text=Try again later")
            
            # Verificar se o elemento est√° vis√≠vel
            is_detected = await try_again_element.is_visible()
            
            if is_detected:
                logger.warning("üö´ Bot detectado pelo reCAPTCHA!")
                
            return is_detected
            
        except Exception:
            return False
    
    async def get_token(self) -> Optional[str]:
        """Obter token do reCAPTCHA se dispon√≠vel
        
        Returns:
            str: Token ou None se n√£o dispon√≠vel
        """
        try:
            token_element = self.page.locator("#recaptcha-token")
            token = await token_element.get_attribute("value")
            return token
        except Exception:
            return None
    
    def get_bypass_status(self) -> dict:
        """Obter status do sistema de bypass
        
        Returns:
            dict: Status do sistema
        """
        return {
            "bypass_available": self.bypass_available,
            "method": "audio_recognition",
            "dependencies": {
                "speech_recognition": True,
                "pydub": True,
                "playwright": True
            }
        }

# Fun√ß√µes de conveni√™ncia
async def solve_recaptcha(page: Page) -> bool:
    """Fun√ß√£o de conveni√™ncia para resolver reCAPTCHA
    
    Args:
        page: P√°gina Playwright
        
    Returns:
        bool: True se resolvido
    """
    solver = CaptchaSolver(page)
    return await solver.solve_captcha()

def get_captcha_solver_info() -> dict:
    """Obter informa√ß√µes sobre o resolvedor de captcha
    
    Returns:
        dict: Informa√ß√µes do sistema
    """
    return {
        "name": "Blacktemplar Captcha Solver",
        "version": "1.0.0",
        "method": "Audio Recognition",
        "supported_types": ["reCAPTCHA v2"],
        "dependencies": ["speech_recognition", "pydub", "playwright"],
        "free": True
    }