#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WAHA Server Embutido - Claudia Cobran√ßas
Servidor WAHA que roda junto com a aplica√ß√£o principal
"""

import asyncio
import json
import logging
import os
import time
from typing import Dict, Any, Optional
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
from pydantic import BaseModel

logger = logging.getLogger(__name__)

# Modelos WAHA
class InstanceCreate(BaseModel):
    instanceName: str
    webhook: Optional[str] = None
    webhookByEvents: bool = False
    webhookBase64: bool = False

class AuthVerify(BaseModel):
    code: str
    phoneNumber: str

class SendCode(BaseModel):
    phoneNumber: str

class SendMessage(BaseModel):
    chatId: str
    text: str

# Estado global do WAHA
waha_state = {
    "instances": {},
    "connections": {},
    "messages": []
}

class WAHAServer:
    """Servidor WAHA embutido"""
    
    def __init__(self):
        self.app = FastAPI(title="WAHA Embutido", version="1.0")
        self.setup_routes()
        
    def setup_routes(self):
        """Configurar rotas WAHA"""
        
        @self.app.get("/api/instances")
        async def list_instances():
            """Listar inst√¢ncias"""
            return {
                "instances": list(waha_state["instances"].keys()),
                "count": len(waha_state["instances"])
            }
        
        @self.app.post("/api/instances/create")
        async def create_instance(data: InstanceCreate):
            """Criar inst√¢ncia"""
            instance_name = data.instanceName
            
            if instance_name in waha_state["instances"]:
                return {"success": False, "error": "Inst√¢ncia j√° existe"}
            
            waha_state["instances"][instance_name] = {
                "name": instance_name,
                "webhook": data.webhook,
                "webhookByEvents": data.webhookByEvents,
                "webhookBase64": data.webhookBase64,
                "status": "created",
                "created_at": time.time()
            }
            
            logger.info(f"‚úÖ Inst√¢ncia WAHA criada: {instance_name}")
            return {"success": True, "instance": waha_state["instances"][instance_name]}
        
        @self.app.post("/api/instances/{instance_name}/start")
        async def start_instance(instance_name: str):
            """Iniciar inst√¢ncia"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            waha_state["instances"][instance_name]["status"] = "started"
            waha_state["instances"][instance_name]["started_at"] = time.time()
            
            logger.info(f"‚úÖ Inst√¢ncia WAHA iniciada: {instance_name}")
            return {"success": True, "status": "started"}
        
        @self.app.get("/api/instances/{instance_name}/info")
        async def get_instance_info(instance_name: str):
            """Obter informa√ß√µes da inst√¢ncia"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            instance = waha_state["instances"][instance_name]
            is_connected = instance_name in waha_state["connections"]
            
            return {
                "name": instance_name,
                "status": "qr" if is_connected else "disconnected",
                "connected": is_connected,
                "webhook": instance.get("webhook"),
                "created_at": instance.get("created_at"),
                "started_at": instance.get("started_at")
            }
        
        @self.app.post("/api/instances/{instance_name}/auth/send-code")
        async def send_code(instance_name: str, data: SendCode):
            """Enviar c√≥digo de verifica√ß√£o"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            phone_number = data.phoneNumber
            
            # Simular envio de c√≥digo (em produ√ß√£o, seria via SMS)
            code = "123456"  # C√≥digo fixo para teste
            
            waha_state["connections"][instance_name] = {
                "phone_number": phone_number,
                "code": code,
                "verified": False,
                "connected_at": None
            }
            
            logger.info(f"üì± C√≥digo enviado para {phone_number}: {code}")
            return {"success": True, "message": "C√≥digo enviado"}
        
        @self.app.post("/api/instances/{instance_name}/auth/verify")
        async def verify_code(instance_name: str, data: AuthVerify):
            """Verificar c√≥digo"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            if instance_name not in waha_state["connections"]:
                raise HTTPException(status_code=400, detail="C√≥digo n√£o foi enviado")
            
            connection = waha_state["connections"][instance_name]
            
            if data.code == connection["code"] and data.phoneNumber == connection["phone_number"]:
                connection["verified"] = True
                connection["connected_at"] = time.time()
                
                logger.info(f"‚úÖ WhatsApp conectado: {data.phoneNumber}")
                return {"success": True, "message": "C√≥digo verificado"}
            else:
                return {"success": False, "error": "C√≥digo inv√°lido"}
        
        @self.app.post("/api/instances/{instance_name}/messages/sendText")
        async def send_message(instance_name: str, data: SendMessage):
            """Enviar mensagem"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            if instance_name not in waha_state["connections"] or not waha_state["connections"][instance_name]["verified"]:
                raise HTTPException(status_code=400, detail="WhatsApp n√£o conectado")
            
            # Simular envio de mensagem
            message_data = {
                "id": f"msg_{int(time.time())}",
                "chatId": data.chatId,
                "text": data.text,
                "timestamp": time.time(),
                "fromMe": True
            }
            
            waha_state["messages"].append(message_data)
            
            logger.info(f"üì§ Mensagem enviada: {data.text}")
            return {"success": True, "message": "Mensagem enviada"}
        
        @self.app.get("/api/instances/{instance_name}/messages")
        async def get_messages(instance_name: str):
            """Obter mensagens"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            return {
                "messages": waha_state["messages"],
                "count": len(waha_state["messages"])
            }
        
        @self.app.delete("/api/instances/{instance_name}")
        async def delete_instance(instance_name: str):
            """Deletar inst√¢ncia"""
            if instance_name in waha_state["instances"]:
                del waha_state["instances"][instance_name]
            
            if instance_name in waha_state["connections"]:
                del waha_state["connections"][instance_name]
            
            logger.info(f"üóëÔ∏è Inst√¢ncia WAHA deletada: {instance_name}")
            return {"success": True, "message": "Inst√¢ncia deletada"}
    
    def get_app(self):
        """Retornar aplica√ß√£o FastAPI"""
        return self.app

# Inst√¢ncia global
waha_server = WAHAServer()

def start_waha_server(port: int = 3000):
    """Iniciar servidor WAHA"""
    app = waha_server.get_app()
    
    config = uvicorn.Config(
        app=app,
        host="0.0.0.0",
        port=port,
        log_level="info"
    )
    
    server = uvicorn.Server(config)
    return server

if __name__ == "__main__":
    # Teste do servidor
    server = start_waha_server()
    server.run()
