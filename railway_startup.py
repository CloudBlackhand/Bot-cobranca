#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Railway Startup Script - Claudia Cobran√ßas
Script otimizado para Railway com healthcheck r√°pido
"""

import os
import sys
import subprocess
import time
import threading
import signal
from fastapi import FastAPI
from fastapi.responses import JSONResponse
import uvicorn

# Criar app minimalista para healthcheck r√°pido
health_app = FastAPI()

@health_app.get("/health")
async def health_check():
    return {"status": "healthy", "railway": True}

def check_waha_connection():
    """Verificar conex√£o com WAHA"""
    try:
        import requests
        waha_url = os.getenv('WAHA_URL', 'http://localhost:3000')
        response = requests.get(f"{waha_url}/api/instances", timeout=10)
        if response.status_code == 200:
            print("‚úÖ WAHA dispon√≠vel")
            return True
        else:
            print("‚ö†Ô∏è WAHA n√£o respondeu corretamente")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è WAHA n√£o dispon√≠vel: {e}")
        return False

def create_directories():
    """Criar diret√≥rios necess√°rios"""
    dirs = ["uploads", "faturas", "web/static", "logs", "temp"]
    for dir_name in dirs:
        os.makedirs(dir_name, exist_ok=True)
    print("‚úÖ Diret√≥rios criados")

def main():
    """Inicializa√ß√£o otimizada para Railway"""
    print("üöÄ Iniciando Claudia Cobran√ßas - Railway Mode")
    
    # Configura√ß√µes
    port = int(os.getenv("PORT", 8000))
    railway_mode = os.getenv("RAILWAY_DEPLOY", "False") == "True"
    
    print(f"üîß Modo Railway: {railway_mode}")
    print(f"üåê Porta: {port}")
    
    # Criar diret√≥rios imediatamente
    create_directories()
    
    # Verificar conex√£o com WAHA
    if railway_mode:
        threading.Thread(target=check_waha_connection, daemon=True).start()
    
    # Configura√ß√µes do servidor
    config = {
        "host": "0.0.0.0",
        "port": port,
        "log_level": "info",
        "access_log": True,
        "timeout_keep_alive": 300,
        "reload": False
    }
    
    if railway_mode:
        config.update({
            "workers": 1,
            "limit_concurrency": 10,
            "limit_max_requests": 1000,
            "backlog": 100
        })
    
    print(f"üéØ Iniciando servidor principal...")
    print(f"üåê Healthcheck: http://0.0.0.0:{port}/health")
    print(f"üìä Dashboard: http://0.0.0.0:{port}/")
    
    try:
        # Importar app principal
        from app import app
        uvicorn.run("app:app", **config)
    except Exception as e:
        print(f"‚ùå Erro ao iniciar: {e}")
        # Fallback para healthcheck b√°sico
        print("üîÑ Iniciando healthcheck b√°sico...")
        uvicorn.run(health_app, host="0.0.0.0", port=port, log_level="error")

if __name__ == "__main__":
    main()
