#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WAHA Real Server - Claudia Cobran√ßas
Servidor WAHA real que envia c√≥digos de verifica√ß√£o via SMS
"""

import asyncio
import json
import logging
import os
import time
import random
import string
from typing import Dict, Any, Optional
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
from pydantic import BaseModel
import requests
from sms_service import sms_service

logger = logging.getLogger(__name__)

# Modelos WAHA
class InstanceCreate(BaseModel):
    instanceName: str
    webhook: Optional[str] = None
    webhookByEvents: bool = False
    webhookBase64: bool = False

class AuthVerify(BaseModel):
    code: str
    phoneNumber: str

class SendCode(BaseModel):
    phoneNumber: str

class SendMessage(BaseModel):
    chatId: str
    text: str

# Estado global do WAHA
waha_state = {
    "instances": {},
    "connections": {},
    "messages": [],
    "verification_codes": {}  # Armazena c√≥digos tempor√°rios
}

class WAHAServer:
    """Servidor WAHA real com envio de c√≥digos"""
    
    def __init__(self):
        self.app = FastAPI(title="WAHA Real", version="1.0")
        self.setup_routes()
        
    def generate_verification_code(self) -> str:
        """Gerar c√≥digo de verifica√ß√£o de 6 d√≠gitos"""
        return ''.join(random.choices(string.digits, k=6))
    
    def send_sms_code(self, phone_number: str, code: str) -> bool:
        """Enviar c√≥digo via SMS real"""
        try:
            message = f"Claudia Cobran√ßas: Seu c√≥digo de verifica√ß√£o √© {code}. V√°lido por 10 minutos."
            
            # Enviar via servi√ßo SMS configurado
            success = sms_service.send_sms(phone_number, message)
            
            if success:
                logger.info(f"üì± SMS enviado para {phone_number}: C√≥digo {code}")
                return True
            else:
                logger.error(f"Falha ao enviar SMS para {phone_number}")
                return False
                
        except Exception as e:
            logger.error(f"Erro ao enviar SMS: {e}")
            return False
    
    def setup_routes(self):
        """Configurar rotas WAHA"""
        
        @self.app.get("/api/instances")
        async def list_instances():
            """Listar inst√¢ncias"""
            return {
                "instances": list(waha_state["instances"].keys()),
                "count": len(waha_state["instances"])
            }
        
        @self.app.post("/api/instances/create")
        async def create_instance(data: InstanceCreate):
            """Criar inst√¢ncia"""
            instance_name = data.instanceName
            
            if instance_name in waha_state["instances"]:
                return {"success": False, "error": "Inst√¢ncia j√° existe"}
            
            waha_state["instances"][instance_name] = {
                "name": instance_name,
                "webhook": data.webhook,
                "webhookByEvents": data.webhookByEvents,
                "webhookBase64": data.webhookBase64,
                "status": "created",
                "created_at": time.time()
            }
            
            logger.info(f"‚úÖ Inst√¢ncia WAHA criada: {instance_name}")
            return {"success": True, "instance": waha_state["instances"][instance_name]}
        
        @self.app.post("/api/instances/{instance_name}/start")
        async def start_instance(instance_name: str):
            """Iniciar inst√¢ncia"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            waha_state["instances"][instance_name]["status"] = "started"
            waha_state["instances"][instance_name]["started_at"] = time.time()
            
            logger.info(f"‚úÖ Inst√¢ncia WAHA iniciada: {instance_name}")
            return {"success": True, "status": "started"}
        
        @self.app.get("/api/instances/{instance_name}/info")
        async def get_instance_info(instance_name: str):
            """Obter informa√ß√µes da inst√¢ncia"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            instance = waha_state["instances"][instance_name]
            is_connected = instance_name in waha_state["connections"] and waha_state["connections"][instance_name]["verified"]
            
            return {
                "name": instance_name,
                "status": "connected" if is_connected else "disconnected",
                "connected": is_connected,
                "webhook": instance.get("webhook"),
                "created_at": instance.get("created_at"),
                "started_at": instance.get("started_at")
            }
        
        @self.app.post("/api/instances/{instance_name}/auth/send-code")
        async def send_code(instance_name: str, data: SendCode):
            """Enviar c√≥digo de verifica√ß√£o REAL"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            phone_number = data.phoneNumber
            
            # Gerar c√≥digo REAL de 6 d√≠gitos
            verification_code = self.generate_verification_code()
            
            # Enviar SMS REAL
            sms_sent = self.send_sms_code(phone_number, verification_code)
            
            if not sms_sent:
                return {"success": False, "error": "Falha ao enviar SMS"}
            
            # Armazenar c√≥digo temporariamente (expira em 10 minutos)
            waha_state["verification_codes"][phone_number] = {
                "code": verification_code,
                "instance": instance_name,
                "created_at": time.time(),
                "expires_at": time.time() + 600  # 10 minutos
            }
            
            # Preparar conex√£o
            waha_state["connections"][instance_name] = {
                "phone_number": phone_number,
                "verified": False,
                "connected_at": None
            }
            
            logger.info(f"üì± C√≥digo REAL enviado para {phone_number}: {verification_code}")
            return {
                "success": True, 
                "message": f"C√≥digo enviado para {phone_number}",
                "phone_number": phone_number
            }
        
        @self.app.post("/api/instances/{instance_name}/auth/verify")
        async def verify_code(instance_name: str, data: AuthVerify):
            """Verificar c√≥digo REAL"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            phone_number = data.phoneNumber
            code = data.code
            
            # Verificar se c√≥digo existe e n√£o expirou
            if phone_number not in waha_state["verification_codes"]:
                return {"success": False, "error": "C√≥digo n√£o foi enviado"}
            
            stored_data = waha_state["verification_codes"][phone_number]
            
            # Verificar expira√ß√£o
            if time.time() > stored_data["expires_at"]:
                del waha_state["verification_codes"][phone_number]
                return {"success": False, "error": "C√≥digo expirado"}
            
            # Verificar se c√≥digo est√° correto
            if code == stored_data["code"] and stored_data["instance"] == instance_name:
                # Marcar como verificado
                if instance_name in waha_state["connections"]:
                    waha_state["connections"][instance_name]["verified"] = True
                    waha_state["connections"][instance_name]["connected_at"] = time.time()
                
                # Limpar c√≥digo usado
                del waha_state["verification_codes"][phone_number]
                
                logger.info(f"‚úÖ WhatsApp conectado: {phone_number}")
                return {"success": True, "message": "C√≥digo verificado com sucesso"}
            else:
                return {"success": False, "error": "C√≥digo inv√°lido"}
        
        @self.app.post("/api/instances/{instance_name}/messages/sendText")
        async def send_message(instance_name: str, data: SendMessage):
            """Enviar mensagem"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            if instance_name not in waha_state["connections"] or not waha_state["connections"][instance_name]["verified"]:
                raise HTTPException(status_code=400, detail="WhatsApp n√£o conectado")
            
            # Simular envio de mensagem
            message_data = {
                "id": f"msg_{int(time.time())}",
                "chatId": data.chatId,
                "text": data.text,
                "timestamp": time.time(),
                "fromMe": True
            }
            
            waha_state["messages"].append(message_data)
            
            logger.info(f"üì§ Mensagem enviada: {data.text}")
            return {"success": True, "message": "Mensagem enviada"}
        
        @self.app.get("/api/instances/{instance_name}/messages")
        async def get_messages(instance_name: str):
            """Obter mensagens"""
            if instance_name not in waha_state["instances"]:
                raise HTTPException(status_code=404, detail="Inst√¢ncia n√£o encontrada")
            
            return {
                "messages": waha_state["messages"],
                "count": len(waha_state["messages"])
            }
        
        @self.app.delete("/api/instances/{instance_name}")
        async def delete_instance(instance_name: str):
            """Deletar inst√¢ncia"""
            if instance_name in waha_state["instances"]:
                del waha_state["instances"][instance_name]
            
            if instance_name in waha_state["connections"]:
                del waha_state["connections"][instance_name]
            
            logger.info(f"üóëÔ∏è Inst√¢ncia WAHA deletada: {instance_name}")
            return {"success": True, "message": "Inst√¢ncia deletada"}
        
        @self.app.get("/health")
        async def health_check():
            """Health check"""
            return {
                "status": "healthy",
                "waha": "real",
                "instances": len(waha_state["instances"]),
                "connections": len([c for c in waha_state["connections"].values() if c["verified"]]),
                "timestamp": time.time()
            }

# Fun√ß√£o para limpar c√≥digos expirados
async def cleanup_expired_codes():
    """Limpar c√≥digos de verifica√ß√£o expirados"""
    while True:
        current_time = time.time()
        expired_phones = []
        
        for phone, data in waha_state["verification_codes"].items():
            if current_time > data["expires_at"]:
                expired_phones.append(phone)
        
        for phone in expired_phones:
            del waha_state["verification_codes"][phone]
            logger.info(f"üóëÔ∏è C√≥digo expirado removido: {phone}")
        
        await asyncio.sleep(60)  # Verificar a cada minuto

# Criar inst√¢ncia do servidor
waha_server = WAHAServer()

def get_app():
    """Retornar aplica√ß√£o FastAPI"""
    return waha_server.app

# Iniciar limpeza de c√≥digos expirados
async def start_cleanup():
    await cleanup_expired_codes()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(waha_server.app, host="0.0.0.0", port=3000)
